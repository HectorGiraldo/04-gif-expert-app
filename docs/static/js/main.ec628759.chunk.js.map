{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setiIputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","console","log","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAgB5C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAG,OAAMP,GAAN,mBAAqBO,OACtCN,EAAc,MAKlB,SACI,uBACAO,KAAK,OACLC,MAAQT,EACRU,SAjBkB,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAQL,GAAR,uBAAAM,EAAA,4DAEN,mCAERC,EAJc,iDAImCC,UAAWR,GAJ9C,6BAEN,oCAFM,SAKDS,MAAOF,GALN,cAKdG,EALc,gBAMCA,EAAKC,OANN,uBAMbC,EANa,EAMbA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZtB,kBAgBbM,GAhBa,4CAAH,sDCARO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIjC,OACI,sBAAKc,UAAU,0CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAMA,SCHLO,EAAU,SAAC,GAAW,IAAVxB,EAAS,EAATA,IAAS,ECHN,SAACA,GAAS,IAAD,EAEPR,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAJoB,mBAE1BC,EAF0B,KAEnBC,EAFmB,KAmBjC,OAZIC,qBAAW,WACPvB,EAAQL,GACH6B,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACzB,IAID0B,EDdwBK,CAAa/B,GAAhCkB,EAFkB,EAEvBN,KAAaa,EAFU,EAEVA,QAKpB,OAHAO,QAAQC,IAAIR,GAIR,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDrB,EAArD,OAEEyB,GAAW,mBAAGJ,UAAU,wCAAb,qBACb,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEjB5BkB,EAAe,WAAO,IAAD,EAGM1C,mBAAS,CAAE,cAHjB,mBAGvB2C,EAHuB,KAGX5C,EAHW,KAM9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQ4C,EAAWrB,KAAI,SAAAd,GAAG,OAAK,cAAC,EAAD,CAEnBA,IAAKA,GADAA,Y,MCd7BoC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.ec628759.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setiIputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setiIputValue( e.target.value); \n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(cat => [ inputValue, ...cat ]);\n            setiIputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n            type='text' \n            value= {inputValue}\n            onChange= { handleInputChange} \n            />\n        </form>\n    )\n\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n\n","\n\n export const getGifs = async ( cat ) => {\n\n    const apiKey ='lecupD47I3UcIsjpbpcWvRg9JmXdgmsk';\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( cat )}&limit=10&api_key=${apiKey}`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n    const gifs = data.map( img => {\n\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return(gifs);\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url}) => {\n\n    // console.log({title, url});\n\n    return (\n        <div className='card animate__animated animate__bounce '>\n            <img src={url} alt={title}></img>\n            <p> { title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\n\nexport const GifGrid = ({cat}) => {\n\n    const {data:images, loading} = useFetchGifs(cat);\n\n    console.log(loading);\n\n\n    return (\n        <>\n            <h3 className='animate__animated animate__bounce'> { cat } </h3>\n\n            { loading && <p className='card animate__animated animate__flash'>Loadind</p> }\n            <div className=\"card-grid\">\n                    {\n                        images.map( img => (\n                            <GifGridItem \n                                key={img.id}\n                                {...img} \n                            />\n                        ))\n                    }\n            </div>\n        </>\n    );\n}\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (cat) => {\n   \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n        useEffect( () => {\n            getGifs(cat)\n                .then(imgs => {\n                    setState({\n                        data: imgs,\n                        loading: false \n                    })  \n                } )\n        }, [cat])\n\n    \n\n    return state;\n}\n","\nimport React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n\n    const [categories, setCategories] = useState([ 'One Punch' ]);\n\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n\n\n            <ol>\n                {\n                    categories.map(cat => (<GifGrid \n                        key={cat}\n                        cat={cat}/>))\n                }\n            </ol>\n        </>\n    )\n}\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}